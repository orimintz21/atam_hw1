.global _start

.section .text
    mov $root, %rax
    cmpq $node_3, (%rax)
    jne bad_exit

    movq $node_3, %rax
    cmpq $3, (%rax)
    jne bad_exit
    cmpq $node_neg_3, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_neg_3, %rax
    cmpq $-3, (%rax)
    jne bad_exit
    cmpq $new_node, 8(%rax)
    jne bad_exit
    cmpq $node_1, 16(%rax)
    jne bad_exit

    movq $new_node, %rax
    cmpq $-10, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_1, %rax
    cmpq $1, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $60, %rax
    movq $0, %rdi
    syscall

bad_exit:
    movq $60, %rax
    movq $1, %rdi
    syscall

.section .data
root: .quad node_3
node_3:
  .quad 3
  .quad node_neg_3
  .quad 0
node_neg_3:
  .quad -3
  .quad 0
  .quad node_1
node_1:
  .quad 1
  .quad 0
  .quad 0
new_node: .quad -10, 0, 0
