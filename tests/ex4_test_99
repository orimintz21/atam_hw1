.global _start

.section .text
    mov $root, %rax
    cmpq $node_neg_3, (%rax)
    jne bad_exit

    movq $node_neg_3, %rax
    cmpq $-3, (%rax)
    jne bad_exit
    cmpq $node_neg_5, 8(%rax)
    jne bad_exit
    cmpq $node_neg_2, 16(%rax)
    jne bad_exit

    movq $node_neg_5, %rax
    cmpq $-5, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $node_neg_4, 16(%rax)
    jne bad_exit

    movq $node_neg_2, %rax
    cmpq $-2, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $node_5, 16(%rax)
    jne bad_exit

    movq $node_neg_4, %rax
    cmpq $-4, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_5, %rax
    cmpq $5, (%rax)
    jne bad_exit
    cmpq $node_1, 8(%rax)
    jne bad_exit
    cmpq $node_6, 16(%rax)
    jne bad_exit

    movq $node_1, %rax
    cmpq $1, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_6, %rax
    cmpq $6, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $new_node, 16(%rax)
    jne bad_exit

    movq $new_node, %rax
    cmpq $11, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $60, %rax
    movq $0, %rdi
    syscall

bad_exit:
    movq $60, %rax
    movq $1, %rdi
    syscall

.section .data
root: .quad node_neg_3
node_neg_3:
  .quad -3
  .quad node_neg_5
  .quad node_neg_2
node_neg_5:
  .quad -5
  .quad 0
  .quad node_neg_4
node_neg_2:
  .quad -2
  .quad 0
  .quad node_5
node_neg_4:
  .quad -4
  .quad 0
  .quad 0
node_5:
  .quad 5
  .quad node_1
  .quad node_6
node_1:
  .quad 1
  .quad 0
  .quad 0
node_6:
  .quad 6
  .quad 0
  .quad 0
new_node: .quad 11, 0, 0
