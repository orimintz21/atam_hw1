.global _start

.section .text
    mov $root, %rax
    cmpq $node_7, (%rax)
    jne bad_exit

    movq $node_7, %rax
    cmpq $7, (%rax)
    jne bad_exit
    cmpq $node_2, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_2, %rax
    cmpq $2, (%rax)
    jne bad_exit
    cmpq $node_neg_2, 8(%rax)
    jne bad_exit
    cmpq $node_5, 16(%rax)
    jne bad_exit

    movq $node_neg_2, %rax
    cmpq $-2, (%rax)
    jne bad_exit
    cmpq $node_neg_5, 8(%rax)
    jne bad_exit
    cmpq $node_0, 16(%rax)
    jne bad_exit

    movq $node_5, %rax
    cmpq $5, (%rax)
    jne bad_exit
    cmpq $node_3, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_neg_5, %rax
    cmpq $-5, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_0, %rax
    cmpq $0, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_3, %rax
    cmpq $3, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $60, %rax
    movq $0, %rdi
    syscall

bad_exit:
    movq $60, %rax
    movq $1, %rdi
    syscall

.section .data
root: .quad node_7
node_7:
  .quad 7
  .quad node_2
  .quad 0
node_2:
  .quad 2
  .quad node_neg_2
  .quad node_5
node_neg_2:
  .quad -2
  .quad node_neg_5
  .quad node_0
node_5:
  .quad 5
  .quad node_3
  .quad 0
node_neg_5:
  .quad -5
  .quad 0
  .quad 0
node_0:
  .quad 0
  .quad 0
  .quad 0
node_3:
  .quad 3
  .quad 0
  .quad 0
new_node: .quad 5, 0, 0
