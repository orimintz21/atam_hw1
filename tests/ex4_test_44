.global _start

.section .text
    mov $root, %rax
    cmpq $node_3, (%rax)
    jne bad_exit

    movq $node_3, %rax
    cmpq $3, (%rax)
    jne bad_exit
    cmpq $node_2, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_2, %rax
    cmpq $2, (%rax)
    jne bad_exit
    cmpq $node_neg_1, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $node_neg_1, %rax
    cmpq $-1, (%rax)
    jne bad_exit
    cmpq $0, 8(%rax)
    jne bad_exit
    cmpq $0, 16(%rax)
    jne bad_exit

    movq $60, %rax
    movq $0, %rdi
    syscall

bad_exit:
    movq $60, %rax
    movq $1, %rdi
    syscall

.section .data
root: .quad node_3
node_3:
  .quad 3
  .quad node_2
  .quad 0
node_2:
  .quad 2
  .quad node_neg_1
  .quad 0
node_neg_1:
  .quad -1
  .quad 0
  .quad 0
new_node: .quad -1, 0, 0
